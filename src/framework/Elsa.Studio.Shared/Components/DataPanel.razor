@using Elsa.Studio.DomInterop.Contracts
@using Elsa.Studio.Localization.Time.Components
@using Elsa.Studio.Models

<style>
    .hover-row:hover .icon-on-hover {
        visibility: visible;
    }

    .icon-on-hover {
        visibility: hidden;
    }
</style>

<MudSimpleTable Outlined="true" Striped="false" Dense="true" Elevation="0" Bordered="false">
    <tbody>
    @{
        var data = HideEmptyValues
            ? Data.Where(x => !string.IsNullOrWhiteSpace(x.Text)).ToList()
            : Data;
    }
    @if (data.Any())
    {
        @foreach (var item in data)
        {
            <tr Class="hover-row">
                <td style="width: 200px;">@item.Label</td>
                <td>
                    @if (!string.IsNullOrWhiteSpace(item.Link))
                    {
                        <MudLink Typo="Typo.body2" Href="@item.Link">@item.Text</MudLink>
                    }
                    else if (item.OnClick != null)
                    {
                        <MudLink Typo="Typo.body2" OnClick="@item.OnClick">@item.Text</MudLink>
                    }
                    else
                    {
                        @if (item.Label == "Created" || item.Label == "Updated" || item.Label == "Finished")
                        {
                            <span><Timestamp Value="@Convert.ToDateTime(item.Text)"></Timestamp></span>
                        }
                        else
                        {
                            <span>@item.Text</span>
                        }
                    }
                </td>
                <td style="width: 50px;">
                    <MudStack Row="true">
                        <MudIconButton Icon="@Icons.Material.Outlined.Visibility" Size="Size.Small" Title="View" OnClick="@(() => OnViewClicked(item!))" Disabled="@(string.IsNullOrWhiteSpace(item.Text))" Class="icon-on-hover"/>
                        <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" Size="Size.Small" Title="Copy" OnClick="@(x => OnCopyClicked(item!))" Disabled="@(string.IsNullOrWhiteSpace(item.Text))"/>
                    </MudStack>
                </td>
            </tr>
        }
    }
    else
    {
        if (ShowNoDataAlert)
        {
            <MudAlert Severity="Severity.Normal" Dense="true" Variant="Variant.Text">@NoDataMessage</MudAlert>
        }
    }
    </tbody>
</MudSimpleTable>

@code {

    /// <summary>
    /// The data to display.
    /// </summary>
    [Parameter]
    public DataPanelModel Data { get; set; } = new ();

    /// <summary>
    /// If true, empty values will be hidden.
    /// </summary>
    [Parameter]
    public bool HideEmptyValues { get; set; }

    /// <summary>
    /// If true, a message will be displayed when there is no data.
    /// </summary>
    [Parameter]
    public bool ShowNoDataAlert { get; set; }

    /// <summary>
    /// The message to display when there is no data.
    /// </summary>
    [Parameter] public string NoDataMessage { get; set; } = "No data available.";

    [Inject] private IClipboard Clipboard { get; set; } = null!;

    [Inject] private ISnackbar Snackbar { get; set; } = null!;

    [Inject] private IDialogService DialogService { get; set; } = null!;


    private async Task OnCopyClicked(DataPanelItem item)
    {
        await Clipboard.CopyText(item.Text);
        Snackbar.Add($"{item.Label} copied to clipboard", Severity.Success);
    }

    private async Task OnViewClicked(DataPanelItem item)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            Position = DialogPosition.Center,
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Large
        };
        var parameters = new DialogParameters
        {
            { nameof(DataPanelItem), item }
        };
        await DialogService.ShowAsync<ContentFormatter>("View value", parameters, options);
    }
}