@using Elsa.Api.Client.Resources.ActivityDescriptors.Models
@using Elsa.Api.Client.Resources.Scripting.Models
@using Elsa.Api.Client.Shared.Models
@using Variant = MudBlazor.Variant
@inherits StudioComponentBase

@{
    RenderFragment RenderSelectComponent(
        string label,
        PropertyDescriptor? propertyDescriptor,
        LogPersistenceConfiguration? logPersistenceConfig,
        EventCallback<Expression> onExpressionChanged,
        EventCallback<string> onStrategyTypeChanged)
    {
        var expression = logPersistenceConfig?.Expression;
        var strategyType = logPersistenceConfig?.StrategyType;
        var props = GetExpressionEditorProps(propertyDescriptor);

        return @<ExpressionEditor
            ExpressionChanged="@(async expr =>
                               {
                                   if (onExpressionChanged.HasDelegate)
                                       await onExpressionChanged.InvokeAsync(expr);
                               })"
            Expression="expression"
            CustomProperties="props"
            DisplayName="@label"
            Description="Enter the expression that will be used to determine the log persistence strategy for this property."
            ReadOnly="IsReadOnly">
            <MudSelect Label="@label"
                       T="string"
                       Variant="@Variant.Outlined"
                       Value="@strategyType"
                       ValueChanged="@(async type =>
                                     {
                                         if (onStrategyTypeChanged.HasDelegate)
                                             await onStrategyTypeChanged.InvokeAsync(type);
                                     })"
                       ReadOnly="IsReadOnly"
                       Disabled="IsReadOnly">
                @foreach (var descriptor in _logPersistenceStrategyDescriptors)
                {
                    <MudSelectItem Value="@descriptor.TypeName">@descriptor.DisplayName</MudSelectItem>
                }
            </MudSelect>
        </ExpressionEditor>;
    }
}
<div class="pa-4">
    <MudForm ReadOnly="IsReadOnly">
        <MudStack Spacing="6">
            <MudText Typo="Typo.overline">Default configuration</MudText>
            @RenderSelectComponent(
                "Default Strategy",
                null,
                _persistenceConfiguration.Default,
                EventCallback.Factory.Create<Expression>(this, OnDefaultExpressionChanged),
                EventCallback.Factory.Create<string>(this, OnDefaultStrategyChanged)
            )
            <MudDivider/>
            <MudText Typo="Typo.overline">Input Properties</MudText>
            @if (!InputDescriptors.Any())
            {
                <Well>
                    <MudAlert Severity="Severity.Normal" Variant="Variant.Text">This activity does not have any input
                        properties.
                    </MudAlert>
                </Well>
            }
            else
            {
                foreach (var input in InputDescriptors)
                {
                    var config = GetLogPersistenceConfig(input.Name, _persistenceConfiguration.Inputs);
                    @RenderSelectComponent(
                        input.Name,
                        input,
                        config,
                        EventCallback.Factory.Create<Expression>(this, expr => OnPropertyExpressionChanged(input.Name, _persistenceConfiguration.Inputs, expr)),
                        EventCallback.Factory.Create<string>(this, value => OnPropertyStrategyChanged(input.Name, _persistenceConfiguration.Inputs, value)))
                }
            }

            <MudDivider/>
            <MudText Typo="Typo.overline">Output Properties</MudText>
            @if (!OutputDescriptors.Any())
            {
                <Well>
                    <MudAlert Severity="Severity.Normal" Variant="Variant.Text">
                        This activity does not have any output properties.
                    </MudAlert>
                </Well>
            }
            else
            {
                foreach (var output in OutputDescriptors)
                {
                    var config = GetLogPersistenceConfig(output.Name, _persistenceConfiguration.Outputs);
                    @RenderSelectComponent(
                        output.Name,
                        output,
                        config,
                        EventCallback.Factory.Create<Expression>(this, expr => OnPropertyExpressionChanged(output.Name, _persistenceConfiguration.Outputs, expr)),
                        EventCallback.Factory.Create<string>(this, value => OnPropertyStrategyChanged(output.Name, _persistenceConfiguration.Outputs, value)))
                }
            }
        </MudStack>
    </MudForm>
</div>