@using System.Text.Json
@using System.Text.Json.Nodes
@using Elsa.Api.Client.Resources.ActivityDescriptors.Enums
@using Elsa.Api.Client.Extensions
@using Elsa.Studio.Workflows.Domain.Contexts
@inherits ActivityWrapperBase
@inject ILocalizer Localizer
@{
    const string white = "#ffffff";
    var colorStyle = CanStartWorkflow ? $"color: {white};" : "";
    var metadata = Stats?.Metadata;
    var hasRetryAttempts = metadata != null && metadata.TryGetValue("HasRetryAttempts", out var hasRetryAttemptsValue) && hasRetryAttemptsValue is JsonElement { ValueKind: JsonValueKind.True }; 
    var color = Stats == null ? MudBlazor.Color.Transparent : Stats.Faulted ? MudBlazor.Color.Error :  Stats.Blocked ? MudBlazor.Color.Warning : Stats.Uncompleted > Stats.Completed ? MudBlazor.Color.Info : Stats.Completed > 0 ? MudBlazor.Color.Success : MudBlazor.Color.Default;
    var content = Stats == null ? null : Stats.Faulted || Stats.Blocked ? Stats.Started.ToString() : Stats.Completed.ToString();
    var icon = Stats == null ? null : content == null ? Stats.Blocked ? Icons.Material.Outlined.HourglassTop : Stats.Uncompleted > 0 ? Icons.Material.Outlined.PlayArrow : null : null;
    var showBadge = Stats != null;
    var cssClass = hasRetryAttempts ? "elsa-activity-wrapper-badge has-retries" : "elsa-activity-wrapper-badge";

    <MudBadge Color="color" Content="content" Overlap="true" Icon="@icon" Style="width: 100%; height: 100%;" Visible="showBadge" class="@cssClass">
        <MudPaper
            Class="elsa-activity pa-3"
            Style="@($"border-left-color: {Color}; {(CanStartWorkflow ? $"background-color: {Color}" : "")};")"
            Outlined="true">
            <MudStack Row="true" AlignItems="AlignItems.Center" Style="height:100%">
                @if (Icon != null)
                {
                    <MudIcon Icon="@Icon" Style="@colorStyle"></MudIcon>
                }
                <MudStack Style="height:100%" Justify="Justify.Center">
                    <MudText Typo="Typo.body1" Style="@colorStyle">@Localizer[Label]</MudText>
                    @{
                        var visiblePorts = Ports.Where(x => x is { Type: PortType.Embedded, IsBrowsable: true }).ToList();
                    }
                    @if (visiblePorts.Any())
                    {
                        <MudStack Row="true">
                            @foreach (var port in visiblePorts)
                            {
                                var portName = port.Name;
                                var providerContext = new PortProviderContext(ActivityDescriptor, Activity);
                                var portProvider = ActivityPortService.GetProvider(providerContext);
                                var childActivity = portProvider.ResolvePort(portName, new(ActivityDescriptor, Activity));

                                @if (childActivity != null)
                                {
                                    <MudField Label="@port.DisplayName" Variant="Variant.Outlined" Margin="Margin.Dense">
                                        <div id="@($"activity-{childActivity.GetId()}")" class="embedded-port embedded-port-occupied cursor-pointer" data-port-name="@port.Name">
                                            <EmbeddedActivityWrapper ActivityId="@childActivity.GetId()" Activity="childActivity" IsSelected="@(SelectedPortName == port.Name)"/>
                                        </div>
                                    </MudField>
                                }
                                else
                                {
                                    <MudPaper Elevation="0" Class="embedded-port pa-4 cursor-pointer" data-port-name="@port.Name" Style="border: 1px dashed var(--mud-palette-lines-default)">
                                        @port.DisplayName
                                    </MudPaper>
                                }
                            }
                        </MudStack>
                    }

                    @if (!string.IsNullOrWhiteSpace(Description) && ShowDescription)
                    {
                        <MudText Typo="Typo.caption" Style="@colorStyle">@Description</MudText>
                    }
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudBadge>
}