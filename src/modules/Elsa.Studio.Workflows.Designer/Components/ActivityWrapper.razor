@using System.Text.Json
@using Elsa.Api.Client.Resources.ActivityDescriptors.Enums
@using Elsa.Api.Client.Extensions
@using Elsa.Studio.Workflows.Domain.Contexts
@inherits StudioComponentBase
@inject ILocalizer Localizer

@{
    const string white = "#ffffff";
    var colorStyle = CanStartWorkflow ? $"color: {white};" : "";
    var backgroundColor = CanStartWorkflow ? _color : white;
    var iconBgColor = CanStartWorkflow ? "" : _color;
    var iconColor = CanStartWorkflow ? _color : white;
    var metadata = Stats?.Metadata;
    var hasRetryAttempts = metadata != null && metadata.TryGetValue("HasRetryAttempts", out var hasRetryAttemptsValue) && hasRetryAttemptsValue is JsonElement { ValueKind: JsonValueKind.True }; 
    var color = Stats == null ? Color.Transparent : Stats.Faulted ? Color.Error :  Stats.Blocked ? Color.Warning : Stats.Uncompleted > Stats.Completed ? Color.Info : Stats.Completed > 0 ? Color.Success : Color.Default;
    var content = Stats == null ? null : Stats.Faulted || Stats.Blocked ? Stats.Started.ToString() : Stats.Completed.ToString();
    var icon = Stats == null ? null : content == null ? Stats.Blocked ? Icons.Material.Outlined.HourglassTop : Stats.Uncompleted > 0 ? Icons.Material.Outlined.PlayArrow : null : null;
    var showBadge = Stats != null;
    var cssClass = hasRetryAttempts ? "elsa-activity-wrapper-badge has-retries" : "elsa-activity-wrapper-badge";
}

<MudBadge Color="color" Content="content" Overlap="true" Icon="@icon" Style="width: 100%; height: 100%;" Visible="showBadge" Class="@cssClass">
    <MudPaper
        Class="elsa-activity activity-grid pa-2"
        Style="@($"background-color: {backgroundColor};")"
        Outlined="true">

        <!-- Icon -->
        @if (_icon != null)
        {
            <div class="activity-icon" style="@($"background-color: {iconBgColor};")">
                <MudIcon Icon="@_icon" Size="Size.Large" Style="@($"color: {iconColor};")" />
            </div>
        }

        <!-- Labels + Embedded ports + Description -->
        <div class="activity-content">
            <MudText Typo="Typo.body1" Class="activity-label" Style="@colorStyle">@Localizer[_label]</MudText>
            <MudText Typo="Typo.subtitle2" Class="activity-type">@Localizer[_typeName]</MudText>

            @{
                var visiblePorts = _ports.Where(x => x is { Type: PortType.Embedded, IsBrowsable: true }).ToList();
            }
            @if (visiblePorts.Any())
            {
                <div class="activity-ports">
                    @foreach (var port in visiblePorts)
                    {
                        var portName = port.Name;
                        var providerContext = new PortProviderContext(_activityDescriptor, Activity);
                        var portProvider = ActivityPortService.GetProvider(providerContext);
                        var childActivity = portProvider.ResolvePort(portName, new(_activityDescriptor, Activity));

                        @if (childActivity != null)
                        {
                            <MudField Label="@port.DisplayName" Variant="Variant.Outlined" Margin="Margin.Dense">
                                <div id="@($"activity-{childActivity.GetId()}")" class="embedded-port embedded-port-occupied cursor-pointer" data-port-name="@port.Name">
                                    <EmbeddedActivityWrapper ActivityId="@childActivity.GetId()" Activity="childActivity" IsSelected="@(SelectedPortName == port.Name)"/>
                                </div>
                            </MudField>
                        }
                        else
                        {
                            <MudPaper Elevation="0" Class="embedded-port pa-4 cursor-pointer" data-port-name="@port.Name" Style="border: 1px dashed var(--mud-palette-lines-default)">
                                @port.DisplayName
                            </MudPaper>
                        }
                    }
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(_description) && _showDescription)
            {
                <MudText Typo="Typo.caption" Class="activity-description" Style="@colorStyle">@_description</MudText>
            }
        </div>

        <!-- Menu -->
        <div class="activity-menu">
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Material.Outlined.Check" IconColor="Color.Primary" Label="Can Start Workflow"/>
                <MudMenuItem Icon="@Icons.Material.Outlined.Delete" Label="Remove"/>
            </MudMenu>
        </div>
    </MudPaper>
</MudBadge>
