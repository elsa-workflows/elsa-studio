@using Elsa.Studio.Models
@using Elsa.Api.Client.Resources.Scripting.Models
@using Elsa.Api.Client.Shared.UIHints.SingleLine
@using Elsa.Studio.DomInterop.Contracts
@using Elsa.Studio.UIHints.Extensions
@using MudBlazor.Utilities

@{
    var inputDescriptor = EditorContext.InputDescriptor;
    var displayName = inputDescriptor.DisplayName;
    var description = inputDescriptor.Description;
    var inputValue = EditorContext.GetLiteralValueOrDefault();
    var adornment = !string.IsNullOrWhiteSpace(_singleLineProps.AdornmentText) ? Adornment.Start : Adornment.None;
}

<ExpressionInput EditorContext="@EditorContext">
    <ChildContent>
        <MudTextFieldExtended 
            T="string"
            Label="@displayName"
            Variant="Variant.Outlined"
            HelperText="@description"
            Margin="Margin.Dense"
            ReadOnly="EditorContext.IsReadOnly"
            Disabled="EditorContext.IsReadOnly"
            Value="@inputValue"
            ValueChanged="OnValueChanged">
            <AdornmentStart>
                @if (!string.IsNullOrWhiteSpace(_singleLineProps.AdornmentText))
                {
                    <MudText Color="Color.Info">@_singleLineProps.AdornmentText</MudText>
                }  
            </AdornmentStart>
            <AdornmentEnd>
                @if (_singleLineProps.EnableCopyAdornment)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                               OnClick="OnCopyClicked"
                               Size="Size.Small"
                               Class="mr-2"/>
                }
            </AdornmentEnd>
        </MudTextFieldExtended>
    </ChildContent>
</ExpressionInput>

@code {

    private SingleLineProps _singleLineProps = new();

    /// Gets or sets the editor context.
    [Parameter]
    public DisplayInputEditorContext EditorContext { get; set; } = default!;

    [Inject] private IClipboard Clipboard { get; set; } = default!;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        _singleLineProps = EditorContext.InputDescriptor.GetSingleLineProps();
    }

    private async Task OnValueChanged(string newValue)
    {
        var expression = Expression.CreateLiteral(newValue.TrimWhitespace());

        await EditorContext.UpdateExpressionAsync(expression);
    }
    private async Task OnCopyClicked()
    {
        string value = (_singleLineProps.AdornmentText ?? String.Empty) + EditorContext.GetLiteralValueOrDefault();
        await Clipboard.CopyText(value);
    }

}